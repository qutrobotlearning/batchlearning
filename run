#! /usr/bin/env python2

from __future__ import print_function, division
import numpy as np, cv2, sys, os, math, random, time, torch, torch.nn as nn, collections, tensorboardX, gym, termcolor, datetime, colored_traceback.always
sys.dont_write_bytecode = True

# package subdirectories
sys.path.insert(0, os.path.abspath("agents"))
sys.path.insert(0, os.path.abspath("sessions"))
sys.path.insert(0, os.path.abspath("tasks"))

#==============================================================================
# EXPERIMENT PARAMS FILE

if len(sys.argv) != 2 or sys.argv[1] in ["help", "-h", "--help"]:
  print("Usage: {} <params_file>".format(sys.argv[0]))
  sys.exit(1)

params_arg = sys.argv[1]
params_dir = os.path. dirname(os.path.abspath(os.path.expanduser(params_arg)))
params_mod = os.path.basename(os.path.abspath(os.path.expanduser(params_arg))).split(".py")[0]

sys.path.insert(0, params_dir)
exec("import {} as params".format(params_mod))

#==============================================================================
# SETUP

# experiment identifiability
run_tag = "{}_{}_{}".format(sys.argv[1].replace("/","_"),
                            params.COMMENT,
                            datetime.datetime.now()).replace(" ","_")

# environments
env = params.CREATE_ENV()

# reproducibility
random      .seed(params.SEED)
np.random   .seed(params.SEED)
env         .seed(params.SEED)
torch.manual_seed(params.SEED)

# tasks
task = params.TASK(env.observation_space, env.action_space, params)

# behavior
agent = params.AGENT(task, params.DATA_IN =="live", params)

# experience
experience = [] if params.DATA_IN == "live" else torch.load(params.DATA_IN)

# logging
writer = tensorboardX.SummaryWriter(log_dir="runs/{}".format(run_tag))

# session management
session = params.SESSION(experience, writer, agent, env, task, run_tag, params, params.DATA_IN=="live")

# running
experience = session.run()

# saving experience for learning offline
if not os.path.exists(".data"): os.mkdir(".data")
torch.save(experience, ".data/{}.pytorch".format(params.DATA_OUT if params.DATA_OUT is not None else run_tag))

